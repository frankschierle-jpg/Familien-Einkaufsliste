import streamlit as st
import json
import os
from datetime import datetime

# =============================
# PDF optional importieren
# =============================
try:
    from fpdf import FPDF
    PDF_AVAILABLE = True
except ModuleNotFoundError:
    PDF_AVAILABLE = False

def export_pdf(data, filename="Einkaufsliste.pdf"):
    if not PDF_AVAILABLE:
        st.warning("üìÑ PDF-Export nicht verf√ºgbar. Installiere fpdf, wenn gen√ºgend Speicher vorhanden ist.")
        return
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Helvetica", size=14)
    pdf.cell(200, 10, txt="üõí Familien Einkaufsliste", ln=True, align="C")
    pdf.ln(10)
    if not data:
        pdf.cell(200, 10, txt="Liste ist leer.", ln=True)
    else:
        kategorien = sorted(set(item["Produktkategorie"] for item in data))
        for kat in kategorien:
            pdf.set_font("Helvetica", "B", 12)
            pdf.cell(200, 10, txt=kat, ln=True)
            pdf.set_font("Helvetica", size=11)
            for item in [x for x in data if x["Produktkategorie"] == kat]:
                status = "‚úÖ" if item["Erledigt"] else "‚¨ú"
                line = f"{status} {item['Produkt']} ‚Äî {item['Menge']} ({item['Einkaufsst√§tte']})"
                pdf.cell(200, 8, txt=line, ln=True)
            pdf.ln(5)
    pdf.output(filename)
    st.success(f"PDF '{filename}' wurde erstellt!")

# =============================
# Hilfsfunktionen
# =============================
def safe_rerun():
    try:
        st.rerun()
    except AttributeError:
        st.experimental_rerun()

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception:
                return []
    return []

# =============================
# Passwortschutz
# =============================
PASSWORD = "geheim123"
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    st.title("üõí Familien Einkaufsliste")
    pw = st.text_input("üîë Passwort eingeben", type="password")
    if pw == PASSWORD or st.button("Login"):
        if pw == PASSWORD:
            st.session_state.logged_in = True
            safe_rerun()
        else:
            st.error("‚ùå Falsches Passwort!")
    st.stop()

# =============================
# Hauptseite
# =============================
st.title("üõí Familien Einkaufsliste")
if st.button("üö™ Logout"):
    st.session_state.logged_in = False
    safe_rerun()

DATA_FILE = "einkaufsliste.json"
ARCHIV_DIR = "archiv"
os.makedirs(ARCHIV_DIR, exist_ok=True)

data = load_data(DATA_FILE)

# Alte Daten kompatibel machen
for item in data:
    if "Produktkategorie" not in item:
        item["Produktkategorie"] = "‚öôÔ∏è Sonstiges"

# =============================
# Kategorien + Produkte
# =============================
KATEGORIEN = {
    "üçé Obst": ["Apfel","Banane","Birne","Pfirsich","Kirsche","Traube","Erdbeere","Himbeere","Blaubeere",
                "Melone","Wassermelone","Mango","Ananas","Orange","Mandarine","Zitrone","Limette",
                "Kiwi","Granatapfel","Feige","Aprikose","Passionsfrucht","Avocado","Cantaloupe",
                "Papaya","Johannisbeere","Holunderbeere","Preiselbeere","Rhabarber","Clementine",
                "Blutorange","Physalis","Nektarine","Brombeere","Boysenbeere","Kumquat","Sternfrucht",
                "Guave","Drachenfrucht","Kaki","Maracuja","Pomelo","Erdbeer-Nutella Mix","Pflaume",
                "Mandarinen","Heidelbeere","Stachelbeere","Traube rot","Traube gr√ºn","Kaki","Litschi",
                "Granatapfelkern"],
    "ü•¶ Gem√ºse": ["Tomate","Gurke","Paprika","Zwiebel","Knoblauch","Kartoffel","Karotte","Brokkoli",
                 "Blumenkohl","Zucchini","Aubergine","Lauch","Sellerie","Radieschen","Rote Beete",
                 "Kohl","Spinat","Feldsalat","Fenchel","Chili","Rucola","K√ºrbis","Mais","Erbsen",
                 "Spargel","Okra","Artischocke","Mangold","Wirsing","Rettich","Pak Choi","Chinakohl",
                 "Bohnen","Linsen","Rosenkohl","S√º√ükartoffel","Pilze","Shiitake","Champignon"],
    "ü•© Fleisch": ["Rindfleisch","H√§hnchen","Schweinefleisch","Hackfleisch","Steak","Wurst",
                   "H√§hnchenbrust","Pute","Kotelett","Speck","Hacksteak"],
    "üêü Fisch": ["Lachs","Forelle","Thunfisch","Seelachs","Garnelen","Kabeljau","Sardinen",
                 "Makrele","Heilbutt","Hering","Scholle","Rotbarsch"],
    "üßÄ K√§se": ["Gouda","Emmentaler","Mozzarella","Camembert","Feta","Parmesan","Edamer",
                "Tilsiter","Bergk√§se","Frischk√§se","Ziegenk√§se"],
    "üå≠ Wurst": ["Salami","Schinken","Mortadella","Lyoner","Bratwurst","Wei√üwurst","Leberwurst",
                "Cervelat","Bauernwurst","Mettwurst"],
    "ü•õ Molkereiprodukte": ["Milch","Joghurt","Sahne","Quark","Butter","Schmand","Kefir","Buttermilch",
                            "Lassi","Molke","Frischmilch","Schlagsahne"],
    "ü•® Backwaren": ["Brot","Vollkornbrot","Weizenbrot","Roggenbrot","Br√∂tchen","Croissant","Brezel",
                     "Toast","Ciabatta","Baguette","Kaiserbr√∂tchen","Laugensemmel","Schwarzbrot",
                     "Dinkelbrot","Rosinenbr√∂tchen","Focaccia","Pain de Campagne","Fladenbrot",
                     "Pita","Bagel","Muffin"],
    "üçì Brotaufstrich": ["Nutella","Honig","Marmelade","Erdbeermarmelade","Konfit√ºre","Marmeladenglas",
                         "Pflaumenmus","Aprikosenmarmelade","Kirschmarmelade","Orangenmarmelade",
                         "Erdnussbutter","Haselnusscreme","Schokocreme","Fruchtaufstrich","Nuss-Nougat"],
    "üç´ S√º√üwaren": ["Schokolade","Milka","Kinderriegel","Gummib√§rchen","Bonbons","Mars","Snickers",
                   "Twix","Riegel","Lakritz","Smarties","KitKat","Ferrero Rocher","Toffifee","Pralinen"],
    "üçü Salzgeb√§ck": ["Chips","Erdnussflips","Salzstangen","Cracker","Brezelsticks","Cheeseballs",
                     "K√§secracker","Popcorn gesalzen","K√§sechips","Maischips"],
    "üß¥ Drogerie": ["Zahnpasta","Zahnb√ºrste","Shampoo","Nivea","Seife","Duschgel","Rasiergel",
                   "Deodorant","Haarsp√ºlung","Handcreme","Sonnencreme","Lotion"],
    "ü•§ Getr√§nke": ["Cola","Coca-Cola","Bier","Wasser","Saft","Tee","Kaffee","Wein","Limo",
                   "Orangensaft","Apfelsaft","Eistee","Mineralwasser"],
    "üßº Wasch- und Reinigungsmittel": ["Waschpulver","Glasreiniger","Badreiniger","Sp√ºlmaschinentabs",
                                       "Allzweckreiniger","Sp√ºlmittelflasche","Bodenreiniger",
                                       "WC-Reiniger","Fleckenentferner","Desinfektionsmittel"],
    "ü•´ (Trocken-)Konserven": ["Linsen","Bohnen","Wildreis","Langkornreis","Risotto Reis","Spaghetti",
                               "Tagliatelle","Sp√§tzle","Mais","Tomaten ganz","Tomaten gest√ºckelt",
                               "Kichererbsen","Erbsen","Kidneybohnen","Bulgur","Quinoa","Couscous",
                               "Rote Linsen","Gelbe Linsen","Haferflocken","Kokosmilch","Tomatenmark"]
}

# =============================
# Autocomplete-Funktion ab 3 Buchstaben
# =============================
def autocomplete_vorschlaege(text):
    text = text.lower()
    vorschlaege = []
    if len(text) >= 3:
        for kat_items in KATEGORIEN.values():
            for prod in kat_items:
                if text in prod.lower():
                    vorschlaege.append(prod)
    return list(set(vorschlaege))[:10]  # max 10 Vorschl√§ge

# =============================
# Neues Produkt hinzuf√ºgen mit Autocomplete
# =============================
with st.form("add_item", clear_on_submit=True):
    produkt_input = st.text_input("Produktname")
    menge = st.text_input("Menge (z. B. 1 St√ºck, 500 g)", "1")
    laden = st.selectbox("Einkaufsst√§tte", ["Rewe", "Aldi", "Lidl", "DM", "Edeka", "Kaufland", "Sonstiges"])

    # Vorschl√§ge anzeigen
    if produkt_input.strip() and len(produkt_input.strip()) >= 3:
        vorschlaege = autocomplete_vorschlaege(produkt_input)
        if vorschlaege:
            st.info("Vorschl√§ge: " + ", ".join(vorschlaege))

    submitted = st.form_submit_button("Hinzuf√ºgen")
    if submitted and produkt_input.strip():
        # Kategorie finden
        kategorie = "‚öôÔ∏è Sonstiges"
        for kat, items in KATEGORIEN.items():
            if any(produkt_input.lower() in p.lower() for p in items):
                kategorie = kat
                break
        neues_item = {
            "Produkt": produkt_input.strip(),
            "Menge": menge.strip(),
            "Produktkategorie": kategorie,
            "Einkaufsst√§tte": laden,
            "Erledigt": False
        }
        data.append(neues_item)
        save_data(DATA_FILE, data)
        st.success(f"{kategorie} {produkt_input} hinzugef√ºgt!")

# =============================
# Einkaufsliste anzeigen
# =============================
st.subheader("üßæ Einkaufsliste")
if not data:
    st.info("Liste ist leer.")
else:
    alle_markieren = st.checkbox("‚úÖ Alles markieren/entmarkieren")
    for i, item in enumerate(data):
        if alle_markieren:
            item["Erledigt"] = True
        cols = st.columns([4,2,1])
        erledigt = cols[0].checkbox(
            f"{item['Produktkategorie']} {item['Produkt']} ‚Äî {item['Menge']}",
            value=item["Erledigt"],
            key=f"chk{i}"
        )
        cols[1].write(item["Einkaufsst√§tte"])
        if cols[2].button("‚ùå", key=f"del{i}"):
            st.session_state["to_delete"] = {"index": i, "produkt": item["Produkt"], "kategorie": item["Produktkategorie"]}
        item["Erledigt"] = erledigt

# =============================
# L√∂schbest√§tigung
# =============================
if "to_delete" in st.session_state:
    td = st.session_state["to_delete"]
    st.warning(f"Soll **{td['kategorie']} {td['produkt']}** wirklich gel√∂scht werden?")
    c1,c2 = st.columns(2)
    if c1.button("‚úÖ Ja, l√∂schen"):
        idx = td["index"]
        if 0 <= idx < len(data):
            data.pop(idx)
        save_data(DATA_FILE, data)
        del st.session_state["to_delete"]
        st.success("Artikel gel√∂scht ‚úÖ")
        safe_rerun()
    if c2.button("‚ùå Abbrechen"):
        del st.session_state["to_delete"]
        st.info("L√∂schen abgebrochen.")

# =============================
# Buttons: Alles erledigen / Alles l√∂schen / Archiv / PDF
# =============================
st.markdown("---")
c1,c2,c3,c4 = st.columns(4)
if c1.button("‚úÖ Alles erledigen"):
    for item in data:
        item["Erledigt"] = True
    save_data(DATA_FILE, data)
    safe_rerun()

if c2.button("üóëÔ∏è Alles l√∂schen"):
    data = []
    save_data(DATA_FILE, data)
    safe_rerun()

if c3.button("üíæ Einkauf speichern"):
    if data:
        datum = datetime.now().strftime("%Y-%m-%d_%H-%M")
        filename = os.path.join(ARCHIV_DIR, f"einkauf_{datum}.json")
        save_data(filename, data)
        st.success(f"Einkaufsliste als {filename} gespeichert!")

if c4.button("üìÑ PDF exportieren"):
    export_pdf(data)

save_data(DATA_FILE, data)
