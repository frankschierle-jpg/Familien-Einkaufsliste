import streamlit as st
import json
import os
from datetime import datetime
import difflib

# =============================
# PDF optional importieren
# =============================
try:
    from fpdf import FPDF
    PDF_AVAILABLE = True
except ModuleNotFoundError:
    PDF_AVAILABLE = False

def export_pdf(data, filename="Einkaufsliste.pdf"):
    if not PDF_AVAILABLE:
        st.warning("üìÑ PDF-Export nicht verf√ºgbar. Installiere fpdf.")
        return
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Helvetica", size=14)
    pdf.cell(200, 10, txt="üõí Schierles Smart Shopper", ln=True, align="C")
    pdf.ln(10)
    if not data:
        pdf.cell(200, 10, txt="Liste ist leer.", ln=True)
    else:
        kategorien_order = [
            "üçé Obst","ü•¶ Gem√ºse","ü•ê Fr√ºhst√ºck","üçØ Brotaufstrich","üç´ S√º√üwaren""ü•® Backwaren","üå≠ Wurst","üßÄ K√§se","ü•õ Molkereiprodukte",
            "ü•© Fleisch","üêü Fisch","ü´ò (Trocken-)Konserven","üçü Salzgeb√§ck","ü•§ Getr√§nke",
            "üß¥ Drogerie","üßº Wasch- und Reinigungsmittel","‚öôÔ∏è Sonstiges"
        ]
        for kat in kategorien_order:
            items_in_cat = [x for x in data if x["Produktkategorie"] == kat]
            if items_in_cat:
                pdf.set_font("Helvetica", "B", 12)
                pdf.cell(200, 10, txt=kat, ln=True)
                pdf.set_font("Helvetica", size=11)
                for item in items_in_cat:
                    status = "‚úÖ" if item["Erledigt"] else "‚¨ú"
                    line = f"{status} {item['Produkt']} ‚Äî {item['Menge']} ({item['Einkaufsst√§tte']}) von {item['Besteller']}"
                    pdf.cell(200, 8, txt=line, ln=True)
                pdf.ln(5)
    pdf.output(filename)
    st.success(f"PDF '{filename}' wurde erstellt!")

# =============================
# Hilfsfunktionen
# =============================
def safe_rerun():
    try:
        st.rerun()
    except AttributeError:
        st.experimental_rerun()

def save_data(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception:
                return []
    return []

# =============================
# Passwort + User Login
# =============================
PASSWORD = "geheim123"
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    st.title("üõí Schierles Smart Shopper")
    with st.form("login_form", clear_on_submit=False):
        user_input = st.text_input("üë§ User", key="login_user")
        pw = st.text_input("üîë Passwort", type="password", key="login_pw")
        submitted = st.form_submit_button("Login")
        if submitted:
            if pw == PASSWORD and user_input.strip():
                st.session_state.logged_in = True
                st.session_state.user = user_input.strip()
                safe_rerun()
            else:
                st.error("‚ùå Falsches Passwort oder kein Benutzername angegeben")
    st.stop()

# =============================
# Hauptseite
# =============================
st.title("üõí Schierles Smart Shopper")
st.write(f"Angemeldet als: **{st.session_state.user}**")
if st.button("üö™ Logout"):
    st.session_state.logged_in = False
    safe_rerun()

DATA_FILE = "einkaufsliste.json"
ARCHIV_DIR = "archiv"
os.makedirs(ARCHIV_DIR, exist_ok=True)
data = load_data(DATA_FILE)

# Alte Daten kompatibel machen
for item in data:
    if "Produktkategorie" not in item:
        item["Produktkategorie"] = "‚öôÔ∏è Sonstiges"
    if "Besteller" not in item:
        item["Besteller"] = "Unbekannt"

# =============================
# Kategorien + Produkte
# =============================
KATEGORIEN = {
    "üçé Obst": ["Apfel","Banane","Birne","Pfirsich","Kirsche","Traube","Erdbeere","Himbeere","Blaubeere",
                "Melone","Wassermelone","Mango","Ananas","Orange","Mandarine","Zitrone","Limette",
                "Kiwi","Granatapfel","Feige","Aprikose","Passionsfrucht","Avocado","Cantaloupe",
                "Papaya","Johannisbeere","Holunderbeere","Preiselbeere","Rhabarber","Clementine",
                "Blutorange","Physalis","Nektarine","Brombeere","Boysenbeere","Kumquat","Sternfrucht",
                "Guave","Drachenfrucht","Kaki","Maracuja","Pomelo","Pflaume","Mandarinen","Heidelbeere",
                "Stachelbeere","Traube rot","Traube gr√ºn","Litschi","Granatapfelkern"],
    "ü•¶ Gem√ºse": ["Tomate","Gurke","Paprika","Zwiebel","Knoblauch","Kartoffel","Karotte","Brokkoli",
                 "Blumenkohl","Zucchini","Aubergine","Lauch","Sellerie","Radieschen","Rote Beete",
                 "Kohl","Spinat","Feldsalat","Fenchel","Chili","Rucola","K√ºrbis","Mais","Erbsen",
                 "Spargel","Okra","Artischocke","Mangold","Wirsing","Rettich","Pak Choi","Chinakohl",
                 "Bohnen","Linsen","Rosenkohl","S√º√ükartoffel","Pilze","Shiitake","Champignon"],
    "ü•ê Fr√ºhst√ºck": ["Kekse","M√ºsli","Haferflocken","Hefegeb√§ck","Cornflakes","Zimtbr√∂tchen"],
    "ü•® Backwaren": ["Brot","Vollkornbrot","Weizenbrot","Roggenbrot","Br√∂tchen","Croissant","Brezel",
                     "Toast","Ciabatta","Baguette","Kaiserbr√∂tchen","Laugensemmel","Schwarzbrot",
                     "Dinkelbrot","Rosinenbr√∂tchen","Focaccia","Pain de Campagne","Fladenbrot",
                     "Pita","Bagel","Muffin"],
    "üå≠ Wurst": ["Salami","Schinken","Mortadella","Lyoner","Bratwurst","Wei√üwurst","Leberwurst",
                "Cervelat","Bauernwurst","Mettwurst"],
    "üßÄ K√§se": ["Gouda","Emmentaler","Mozzarella","Camembert","Feta","Parmesan","Edamer",
                "Tilsiter","Bergk√§se","Frischk√§se","Ziegenk√§se"],
    "ü•õ Molkereiprodukte": ["Milch","Joghurt","Sahne","Quark","Butter","Schmand","Kefir","Buttermilch",
                            "Lassi","Molke","Frischmilch","Schlagsahne"],
    "ü•© Fleisch": ["Rindfleisch","H√§hnchen","Schweinefleisch","Hackfleisch","Steak","Wurst",
                   "H√§hnchenbrust","Pute","Kotelett","Speck","Hacksteak"],
    "üêü Fisch": ["Lachs","Forelle","Thunfisch","Seelachs","Garnelen","Kabeljau","Sardinen",
                 "Makrele","Heilbutt","Hering","Scholle","Rotbarsch"],
    "ü´ò (Trocken-)Konserven": ["Linsen","Bohnen","Wildreis","Langkornreis","Risotto Reis","Spaghetti",
                               "Tagliatelle","Sp√§tzle","Mais","Tomaten ganz","Tomaten gest√ºckelt",
                               "Kichererbsen","Erbsen","Kidneybohnen","Bulgur","Quinoa","Couscous",
                               "Rote Linsen","Gelbe Linsen","Haferflocken","Kokosmilch","Tomatenmark"],
    "üçØ Brotaufstrich": ["Nutella","Honig","Marmelade","Erdbeermarmelade","Konfit√ºre","Marmeladenglas",
                         "Pflaumenmus","Aprikosenmarmelade","Kirschmarmelade","Orangenmarmelade",
                         "Erdnussbutter","Haselnusscreme","Schokocreme","Fruchtaufstrich","Nuss-Nougat"],
    "üç´ S√º√üwaren": ["Schokolade","Milka","Kinderriegel","Gummib√§rchen","Bonbons","Mars","Snickers",
                   "Twix","Riegel","Lakritz","Smarties","KitKat","Ferrero Rocher","Toffifee","Pralinen"],
    "üçü Salzgeb√§ck": ["Chips","Erdnussflips","Salzstangen","Cracker","Brezelsticks","Cheeseballs",
                     "K√§secracker","Popcorn gesalzen","K√§sechips","Maischips"],
    "üß¥ Drogerie": ["Zahnpasta","Zahnb√ºrste","Shampoo","Nivea","Seife","Duschgel","Rasiergel",
                   "Deodorant","Haarsp√ºlung","Handcreme","Sonnencreme","Lotion"],
    "ü•§ Getr√§nke": ["Cola","Coca-Cola","Bier","Wasser","Saft","Tee","Kaffee","Wein","Limo",
                   "Orangensaft","Apfelsaft","Eistee","Mineralwasser"],
    "üßº Wasch- und Reinigungsmittel": ["Waschpulver","Glasreiniger","Badreiniger","Sp√ºlmaschinentabs",
                                       "Allzweckreiniger","Sp√ºlmittelflasche","Bodenreiniger",
                                       "WC-Reiniger","Fleckenentferner","Desinfektionsmittel"],
    "‚öôÔ∏è Sonstiges": []
}

ALL_PRODUCTS = sorted(list({p for items in KATEGORIEN.values() for p in items}))

# =============================
# Neues Produkt hinzuf√ºgen
# =============================
with st.form("add_item", clear_on_submit=True):
    produkt_input = st.text_input("Produktname (ab 3 Buchstaben)")
    menge = st.text_input("Menge (z. B. 1 St√ºck, 500 g)", "1")
    laden = st.selectbox("Einkaufsst√§tte", sorted(["Aldi","DM","Edeka","Kaufland","Lidl","Rewe","Rossmann","Sonstiges"]))

    produkt = produkt_input.strip()
    if len(produkt) >= 3:
        matches = difflib.get_close_matches(produkt, ALL_PRODUCTS, n=1, cutoff=0.6)
        if matches:
            produkt = matches[0]

    submitted = st.form_submit_button("Hinzuf√ºgen")
    if submitted and produkt:
        kategorie = "‚öôÔ∏è Sonstiges"
        for kat, items in KATEGORIEN.items():
            if produkt in items:
                kategorie = kat
                break
        neues_item = {
            "Produkt": produkt,
            "Menge": menge,
            "Produktkategorie": kategorie,
            "Einkaufsst√§tte": laden,
            "Erledigt": False,
            "Besteller": st.session_state.user
        }
        data.append(neues_item)
        save_data(DATA_FILE, data)
        st.success(f"{kategorie} {produkt} hinzugef√ºgt!")

# =============================
# Einkaufsliste anzeigen
# =============================
st.subheader("üßæ Einkaufsliste")
if not data:
    st.info("Liste ist leer.")
else:
    alle_markieren = st.checkbox("‚úÖ Alle markieren")

    # Checkbox pro Einkaufsst√§tte
    unique_stores = sorted(list({x["Einkaufsst√§tte"] for x in data}))
    store_checkbox_state = {}
    for store in unique_stores:
        store_checkbox_state[store] = st.checkbox(f"‚úÖ Alles in {store} erledigen", key=f"store_{store}")
        if store_checkbox_state[store]:
            for item in data:
                if item["Einkaufsst√§tte"] == store:
                    item["Erledigt"] = True
        save_data(DATA_FILE, data)

    kategorien_order = [
        "üçé Obst","ü•¶ Gem√ºse","ü•ê Fr√ºhst√ºck","üçØ Brotaufstrich","üç´ S√º√üwaren","ü•® Backwaren","üå≠ Wurst","üßÄ K√§se","ü•õ Molkereiprodukte",
        "ü•© Fleisch","üêü Fisch","ü´ò (Trocken-)Konserven","üçü Salzgeb√§ck","ü•§ Getr√§nke",
        "üß¥ Drogerie","üßº Wasch- und Reinigungsmittel","‚öôÔ∏è Sonstiges"
    ]
    data.sort(key=lambda x: (x["Einkaufsst√§tte"], kategorien_order.index(x["Produktkategorie"])))

    for i, item in enumerate(data):
        cols = st.columns([3,1,1,1,1])
        bg_color = "#d4edda" if item["Erledigt"] else "#ffffff"
        cols[0].markdown(f"<div style='background-color:{bg_color};padding:4px'>{item['Produktkategorie']} {item['Produkt']} ‚Äî {item['Menge']}</div>", unsafe_allow_html=True)
        cols[1].markdown(f"<div style='background-color:{bg_color};padding:4px'>{item['Einkaufsst√§tte']}</div>", unsafe_allow_html=True)
        cols[2].markdown(f"<div style='background-color:{bg_color};padding:4px'>{item['Besteller']}</div>", unsafe_allow_html=True)

        # ‚úÖ Toggle erledigt
        if cols[3].button("‚úÖ", key=f"done{i}"):
            item["Erledigt"] = not item["Erledigt"]
            save_data(DATA_FILE, data)
            safe_rerun()

        # ‚ùå L√∂schen
        delete_key = f"delete_{i}"
        if cols[4].button("‚ùå", key=delete_key):
            st.session_state[f"modal_delete_{i}"] = True

        if st.session_state.get(f"modal_delete_{i}", False):
            modal = st.modal("L√∂schen best√§tigen")
            with modal:
                st.write(f"M√∂chtest du **{item['Produkt']}** wirklich l√∂schen?")
                if st.button("Ja, l√∂schen", key=f"confirm_{i}"):
                    data.pop(i)
                    save_data(DATA_FILE, data)
                    st.session_state[f"modal_delete_{i}"] = False
                    safe_rerun()
                if st.button("Abbrechen", key=f"cancel_{i}"):
                    st.session_state[f"modal_delete_{i}"] = False
                    safe_rerun()

# =============================
# Archiv & PDF
# =============================
st.markdown("---")
c1,c2 = st.columns(2)
if c1.button("üíæ Einkauf speichern"):
    if data:
        datum = datetime.now().strftime("%Y-%m-%d_%H-%M")
        filename = os.path.join(ARCHIV_DIR, f"einkauf_{datum}.json")
        save_data(filename, data)
        st.success(f"Einkaufsliste als {filename} gespeichert!")

if c2.button("üìÑ PDF exportieren"):
    export_pdf(data)

save_data(DATA_FILE, data)

